From: David Steele <steele@debian.org>
Date: Fri, 2 Jun 2017 11:23:37 -0400
Subject: Remove fusermount tests, for autopkgtest

The ability to mount fuse filesystems is not available.
---
 tests/cli/cli_test.go                              | 152 -----
 tests/defaults/main_test.go                        | 118 ----
 .../example_filesystems_test.go                    | 144 ----
 tests/matrix/matrix_test.go                        | 754 ---------------------
 tests/plaintextnames/plaintextnames_test.go        |  84 ---
 tests/reverse/correctness_test.go                  |  91 ---
 tests/reverse/ctlsock_test.go                      |  68 --
 tests/reverse/longname_perf_test.go                |  50 --
 tests/reverse/main_test.go                         |  56 --
 9 files changed, 1517 deletions(-)
 delete mode 100644 tests/defaults/main_test.go
 delete mode 100644 tests/matrix/matrix_test.go
 delete mode 100644 tests/plaintextnames/plaintextnames_test.go
 delete mode 100644 tests/reverse/correctness_test.go
 delete mode 100644 tests/reverse/ctlsock_test.go
 delete mode 100644 tests/reverse/longname_perf_test.go
 delete mode 100644 tests/reverse/main_test.go

--- a/tests/cli/cli_test.go
+++ b/tests/cli/cli_test.go
@@ -6,7 +6,6 @@
 	"io/ioutil"
 	"os"
 	"os/exec"
-	"syscall"
 	"testing"
 
 	"github.com/rfjakob/gocryptfs/internal/configfile"
@@ -94,94 +93,6 @@
 	}
 }
 
-// Test -passwd flag
-func TestPasswd(t *testing.T) {
-	// Create FS
-	dir := test_helpers.InitFS(t)
-	mnt := dir + ".mnt"
-	// Add content
-	test_helpers.MountOrFatal(t, dir, mnt, "-extpass", "echo test")
-	file1 := mnt + "/file1"
-	err := ioutil.WriteFile(file1, []byte("somecontent"), 0600)
-	if err != nil {
-		t.Fatal(err)
-	}
-	err = test_helpers.UnmountErr(mnt)
-	if err != nil {
-		t.Fatal(err)
-	}
-	// Change password to "newpasswd"
-	testPasswd(t, dir)
-	// Mount and verify
-	test_helpers.MountOrFatal(t, dir, mnt, "-extpass", "echo newpasswd")
-	content, err := ioutil.ReadFile(file1)
-	if err != nil {
-		t.Error(err)
-	} else if string(content) != "somecontent" {
-		t.Errorf("wrong content: %q", string(content))
-	}
-	err = test_helpers.UnmountErr(mnt)
-	if err != nil {
-		t.Fatal(err)
-	}
-}
-
-// Test -passwd with -masterkey
-func TestPasswdMasterkey(t *testing.T) {
-	// Create FS
-	dir := test_helpers.InitFS(t)
-	// Overwrite with config with known master key
-	conf, err := ioutil.ReadFile("gocryptfs.conf.b9e5ba23")
-	if err != nil {
-		t.Fatal(err)
-	}
-	syscall.Unlink(dir + "/gocryptfs.conf")
-	err = ioutil.WriteFile(dir+"/gocryptfs.conf", conf, 0600)
-	if err != nil {
-		t.Fatal(err)
-	}
-	// Add content
-	mnt := dir + ".mnt"
-	test_helpers.MountOrFatal(t, dir, mnt, "-extpass", "echo test")
-	file1 := mnt + "/file1"
-	err = ioutil.WriteFile(file1, []byte("somecontent"), 0600)
-	if err != nil {
-		t.Fatal(err)
-	}
-	test_helpers.UnmountPanic(mnt)
-	// Change password using stdin
-	args := []string{"-q", "-passwd", "-masterkey",
-		"b9e5ba23-981a22b8-c8d790d8-627add29-f680513f-b7b7035f-d203fb83-21d82205"}
-	args = append(args, dir)
-	cmd := exec.Command(test_helpers.GocryptfsBinary, args...)
-	cmd.Stdout = os.Stdout
-	cmd.Stderr = os.Stderr
-	p, err := cmd.StdinPipe()
-	if err != nil {
-		t.Fatal(err)
-	}
-	err = cmd.Start()
-	if err != nil {
-		t.Error(err)
-	}
-	// New password
-	p.Write([]byte("newpasswd\n"))
-	p.Close()
-	err = cmd.Wait()
-	if err != nil {
-		t.Error(err)
-	}
-	// Mount and verify
-	test_helpers.MountOrFatal(t, dir, mnt, "-extpass", "echo newpasswd")
-	content, err := ioutil.ReadFile(file1)
-	if err != nil {
-		t.Error(err)
-	} else if string(content) != "somecontent" {
-		t.Errorf("wrong content: %q", string(content))
-	}
-	test_helpers.UnmountPanic(mnt)
-}
-
 // Test -passwd with -reverse
 func TestPasswdReverse(t *testing.T) {
 	// Create FS
@@ -210,69 +121,6 @@
 	}
 }
 
-// Test -ro
-func TestRo(t *testing.T) {
-	dir := test_helpers.InitFS(t)
-	mnt := dir + ".mnt"
-	test_helpers.MountOrFatal(t, dir, mnt, "-ro", "-extpass=echo test")
-	defer test_helpers.UnmountPanic(mnt)
-
-	file := mnt + "/file"
-	err := os.Mkdir(file, 0777)
-	if err == nil {
-		t.Errorf("Mkdir should have failed")
-	}
-	_, err = os.Create(file)
-	if err == nil {
-		t.Errorf("Create should have failed")
-	}
-}
-
-// Test "-nonempty"
-func TestNonempty(t *testing.T) {
-	dir := test_helpers.InitFS(t)
-	mnt := dir + ".mnt"
-	err := os.Mkdir(mnt, 0700)
-	if err != nil {
-		t.Fatal(err)
-	}
-	err = ioutil.WriteFile(mnt+"/somefile", []byte("xyz"), 0600)
-	if err != nil {
-		t.Fatal(err)
-	}
-	err = test_helpers.Mount(dir, mnt, false, "-extpass=echo test")
-	if err == nil {
-		t.Errorf("Mounting over a file should fail per default")
-	}
-	// Should work with "-nonempty"
-	test_helpers.MountOrFatal(t, dir, mnt, "-nonempty", "-extpass=echo test")
-	test_helpers.UnmountPanic(mnt)
-}
-
-// Test "mountpoint shadows cipherdir" handling
-func TestShadows(t *testing.T) {
-	mnt := test_helpers.InitFS(t)
-	cipher := mnt + ".cipher"
-	err := os.Rename(mnt, cipher)
-	if err != nil {
-		t.Fatal(err)
-	}
-	// This should work
-	// (note that MountOrFatal creates "mnt" again)
-	test_helpers.MountOrFatal(t, cipher, mnt, "-extpass=echo test")
-	test_helpers.UnmountPanic(mnt)
-	cipher2 := mnt + "/cipher"
-	err = os.Rename(cipher, cipher2)
-	if err != nil {
-		t.Fatal(err)
-	}
-	// This should fail
-	err = test_helpers.Mount(cipher2, mnt, false, "-extpass=echo test")
-	if err == nil {
-		t.Errorf("Should have failed")
-	}
-}
-
 // TestInitTrailingGarbage verfies that gocryptfs exits with an error if we
 // pass additional data after the password.
 func TestInitTrailingGarbage(t *testing.T) {
--- a/tests/defaults/main_test.go
+++ /dev/null
@@ -1,118 +0,0 @@
-// Tests and benchmarks performed with default settings only.
-package defaults
-
-import (
-	"bytes"
-	"os"
-	"os/exec"
-	"syscall"
-	"testing"
-
-	"github.com/rfjakob/gocryptfs/internal/ctlsock"
-	"github.com/rfjakob/gocryptfs/tests/test_helpers"
-)
-
-func TestMain(m *testing.M) {
-	test_helpers.ResetTmpDir(true)
-	test_helpers.MountOrExit(test_helpers.DefaultCipherDir, test_helpers.DefaultPlainDir, "-zerokey")
-	r := m.Run()
-	test_helpers.UnmountPanic(test_helpers.DefaultPlainDir)
-	os.Exit(r)
-}
-
-// Test that we get the right timestamp when extracting a tarball.
-func Test1980Tar(t *testing.T) {
-	c := exec.Command("tar", "xzf", "1980.tar.gz", "-C", test_helpers.DefaultPlainDir)
-	c.Stderr = os.Stderr
-	c.Stdout = os.Stdout
-	err := c.Run()
-	if err != nil {
-		t.Fatal(err)
-	}
-	fi, err := os.Stat(test_helpers.DefaultPlainDir + "/1980.txt")
-	if err != nil {
-		t.Fatal(err)
-	}
-	m := fi.ModTime().Unix()
-	if m != 315619323 {
-		t.Errorf("Wrong mtime: %d", m)
-	}
-}
-
-func TestCtlSock(t *testing.T) {
-	cDir := test_helpers.InitFS(t)
-	pDir := cDir + ".mnt"
-	sock := cDir + ".sock"
-	test_helpers.MountOrFatal(t, cDir, pDir, "-ctlsock="+sock, "-extpass", "echo test")
-	defer test_helpers.UnmountPanic(pDir)
-	req := ctlsock.RequestStruct{
-		EncryptPath: "foobar",
-	}
-	response := test_helpers.QueryCtlSock(t, sock, req)
-	if response.Result == "" || response.ErrNo != 0 {
-		t.Errorf("got an error reply: %+v", response)
-	}
-	req.EncryptPath = "not-existing-dir/xyz"
-	response = test_helpers.QueryCtlSock(t, sock, req)
-	if response.ErrNo != int32(syscall.ENOENT) || response.Result != "" {
-		t.Errorf("incorrect error handling: %+v", response)
-	}
-	// Strange paths should not cause a crash
-	crashers := []string{"/foo", "foo/", "/foo/", ".", "/////", "/../../."}
-	for _, c := range crashers {
-		req.EncryptPath = c
-		// QueryCtlSock calls t.Fatal if it gets EOF when gocryptfs panics
-		response = test_helpers.QueryCtlSock(t, sock, req)
-		if response.WarnText == "" {
-			t.Errorf("We should get a warning about non-canonical paths here")
-		}
-	}
-}
-
-// In gocryptfs before v1.2, the file header was only read once for each
-// open. But truncating a file to zero will generate a new random file ID.
-// The sequence below caused an I/O error to be returned.
-func TestOpenTruncateRead(t *testing.T) {
-	fn := test_helpers.DefaultPlainDir + "/TestTruncateWrite"
-	// First FD is used for write and trucate.
-	writeFd, err := os.Create(fn)
-	if err != nil {
-		t.Fatal(err)
-	}
-	abc := []byte("abc")
-	_, err = writeFd.WriteAt(abc, 0)
-	if err != nil {
-		t.Fatal(err)
-	}
-	// Second FD is just for reading.
-	readFd, err := os.Open(fn)
-	if err != nil {
-		t.Fatal(err)
-	}
-	content := make([]byte, 3)
-	_, err = readFd.ReadAt(content, 0)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if !bytes.Equal(content, abc) {
-		t.Fatalf("wrong content: %s", string(content))
-	}
-	// Truncate to zero to generate a new file ID and write new content.
-	err = writeFd.Truncate(0)
-	if err != nil {
-		t.Fatal(err)
-	}
-	xyz := []byte("xyz")
-	_, err = writeFd.WriteAt(xyz, 0)
-	if err != nil {
-		t.Fatal(err)
-	}
-	// Try to read from the other FD.
-	_, err = readFd.ReadAt(content, 0)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if !bytes.Equal(content, xyz) {
-		t.Fatalf("wrong content: %s", string(content))
-	}
-}
--- a/tests/example_filesystems/example_filesystems_test.go
+++ /dev/null
@@ -1,252 +0,0 @@
-package example_filesystems
-
-// Mount example filesystems, check that the example content (normal file, symlinks)
-// is there and test mkdir and rmdir
-//
-// Runs all the tests twice, once with "-openssl=false" and once with
-// "-openssl=true".
-
-import (
-	"flag"
-	"fmt"
-	"os"
-	"testing"
-
-	"github.com/rfjakob/gocryptfs/internal/stupidgcm"
-	"github.com/rfjakob/gocryptfs/tests/test_helpers"
-)
-
-const statusTxtContent = "It works!\n"
-
-var opensslOpt string
-
-func TestMain(m *testing.M) {
-	// Make "testing.Verbose()" return the correct value
-	flag.Parse()
-	variants := []string{"-openssl=false"}
-	if !stupidgcm.BuiltWithoutOpenssl {
-		variants = append(variants, "-openssl=true")
-	} else {
-		fmt.Println("Skipping OpenSSL tests, I have been compiled without openssl support")
-	}
-	for _, opensslOpt = range variants {
-		if testing.Verbose() {
-			fmt.Printf("example_filesystems: testing with %q\n", opensslOpt)
-		}
-		test_helpers.ResetTmpDir(false)
-		r := m.Run()
-		if r != 0 {
-			os.Exit(r)
-		}
-	}
-	os.Exit(0)
-}
-
-// This filesystem is not supported anymore.
-func TestExampleFSv04(t *testing.T) {
-	cDir := "v0.4"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := test_helpers.Mount(cDir, pDir, false, "-extpass", "echo test", opensslOpt)
-	if err == nil {
-		t.Errorf("Mounting too old FS should fail")
-	}
-}
-
-// This filesystem is not supported anymore.
-func TestExampleFSv05(t *testing.T) {
-	cDir := "v0.5"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := test_helpers.Mount(cDir, pDir, false, "-extpass", "echo test", opensslOpt)
-	if err == nil {
-		t.Errorf("Mounting too old FS should fail")
-	}
-}
-
-// This filesystem is not supported anymore.
-func TestExampleFSv06(t *testing.T) {
-	cDir := "v0.6"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := test_helpers.Mount(cDir, pDir, false, "-extpass", "echo test", opensslOpt)
-	if err == nil {
-		t.Errorf("Mounting too old FS should fail")
-	}
-}
-
-// This filesystem is not supported anymore.
-func TestExampleFSv06PlaintextNames(t *testing.T) {
-	cDir := "v0.6-plaintextnames"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := test_helpers.Mount(cDir, pDir, false, "-extpass", "echo test", opensslOpt)
-	if err == nil {
-		t.Errorf("Mounting too old FS should fail")
-	}
-}
-
-// Test example_filesystems/v0.7
-// with password mount and -masterkey mount
-// v0.7 adds 128 bit GCM IVs
-func TestExampleFSv07(t *testing.T) {
-	cDir := "v0.7"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := os.Mkdir(pDir, 0777)
-	if err != nil {
-		t.Fatal(err)
-	}
-	test_helpers.MountOrFatal(t, cDir, pDir, "-extpass", "echo test", opensslOpt)
-	checkExampleFS(t, pDir, true)
-	test_helpers.UnmountPanic(pDir)
-	test_helpers.MountOrFatal(t, cDir, pDir, "-masterkey",
-		"ed7f6d83-40cce86c-0e7d79c2-a9438710-575221bf-30a0eb60-2821fa8f-7f3123bf",
-		"-raw64=false", "-hkdf=false", opensslOpt)
-	checkExampleFS(t, pDir, true)
-	test_helpers.UnmountPanic(pDir)
-}
-
-// gocryptfs v0.7 filesystem created with "-plaintextnames"
-func TestExampleFSv07PlaintextNames(t *testing.T) {
-	cDir := "v0.7-plaintextnames"
-	pDir := test_helpers.TmpDir + "/" + cDir + ".mnt"
-
-	test_helpers.MountOrFatal(t, cDir, pDir, "-extpass", "echo test", opensslOpt)
-	checkExampleFS(t, pDir, true)
-	test_helpers.UnmountPanic(pDir)
-	// The actual unmount takes some time, this causes weird problems. Just don't
-	// reuse the mountpoint.
-	pDir = pDir + ".2"
-	test_helpers.MountOrFatal(t, cDir, pDir, "-plaintextnames", "-masterkey",
-		"6d96397b-585631e1-c7cba69d-61e738b6-4d5ad2c2-e21f0fb3-52f60d3a-b08526f7",
-		"-raw64=false", "-hkdf=false", opensslOpt)
-	checkExampleFS(t, pDir, true)
-	test_helpers.UnmountPanic(pDir)
-}
-
-// Test example_filesystems/v0.9
-// (gocryptfs v0.9 introduced long file name support)
-func TestExampleFSv09(t *testing.T) {
-	cDir := "v0.9"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := os.Mkdir(pDir, 0777)
-	if err != nil {
-		t.Fatal(err)
-	}
-	test_helpers.MountOrFatal(t, cDir, pDir, "-extpass", "echo test", opensslOpt)
-	checkExampleFSLongnames(t, pDir)
-	test_helpers.UnmountPanic(pDir)
-	pDir = pDir + ".2"
-	test_helpers.MountOrFatal(t, cDir, pDir, "-masterkey",
-		"1cafe3f4-bc316466-2214c47c-ecd89bf3-4e078fe4-f5faeea7-8b7cab02-884f5e1c",
-		"-raw64=false", "-hkdf=false", opensslOpt)
-	checkExampleFSLongnames(t, pDir)
-	test_helpers.UnmountPanic(pDir)
-}
-
-// gocryptfs v1.1 introduced AES-SIV
-func TestExampleFSv11(t *testing.T) {
-	cDir := "v1.1-aessiv"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := os.Mkdir(pDir, 0777)
-	if err != nil {
-		t.Fatal(err)
-	}
-	test_helpers.MountOrFatal(t, cDir, pDir, "-extpass", "echo test", opensslOpt)
-	checkExampleFSLongnames(t, pDir)
-	test_helpers.UnmountPanic(pDir)
-	pDir = pDir + ".2"
-	test_helpers.MountOrFatal(t, cDir, pDir, "-masterkey",
-		"eaf371c3-f9a55336-8819f22b-7bccd7c2-a738cf61-7261c658-14c28a03-9428992b",
-		"-aessiv", "-raw64=false", "-hkdf=false", opensslOpt)
-	checkExampleFSLongnames(t, pDir)
-	test_helpers.UnmountPanic(pDir)
-}
-
-// gocryptfs v1.1 introduced reverse mode
-func TestExampleFSv11reverse(t *testing.T) {
-	dirA := "v1.1-reverse"
-	dirB := test_helpers.TmpDir + "/" + dirA + ".B"
-	err := os.Mkdir(dirB, 0700)
-	if err != nil {
-		t.Fatal(err)
-	}
-	dirC := test_helpers.TmpDir + "/" + dirA + ".C"
-	err = os.Mkdir(dirC, 0700)
-	if err != nil {
-		t.Fatal(err)
-	}
-	test_helpers.MountOrFatal(t, dirA, dirB, "-reverse", "-extpass", "echo test", opensslOpt)
-	c := dirB + "/gocryptfs.conf"
-	if !test_helpers.VerifyExistence(c) {
-		t.Errorf("%s missing", c)
-	}
-	test_helpers.MountOrFatal(t, dirB, dirC, "-extpass", "echo test", opensslOpt)
-	checkExampleFSrw(t, dirC, false)
-	test_helpers.UnmountPanic(dirC)
-	test_helpers.UnmountPanic(dirB)
-
-	m := "68b51855-042abd80-635ae1ba-90152a78-2ec2d243-832ac72a-eab0561a-f2d37913"
-	test_helpers.MountOrFatal(t, dirA, dirB, "-reverse", "-masterkey", m,
-		"-raw64=false", "-hkdf=false", opensslOpt)
-	if !test_helpers.VerifyExistence(c) {
-		t.Errorf("%s missing", c)
-	}
-	test_helpers.MountOrFatal(t, dirB, dirC, "-aessiv", "-masterkey", m,
-		"-raw64=false", "-hkdf=false", opensslOpt)
-	checkExampleFSrw(t, dirC, false)
-	test_helpers.UnmountPanic(dirC)
-	test_helpers.UnmountPanic(dirB)
-}
-
-// gocryptfs v1.1 introduced reverse mode
-func TestExampleFSv11reversePlaintextnames(t *testing.T) {
-	dirA := "v1.1-reverse-plaintextnames"
-	dirB := test_helpers.TmpDir + "/" + dirA + ".B"
-	err := os.Mkdir(dirB, 0700)
-	if err != nil {
-		t.Fatal(err)
-	}
-	dirC := test_helpers.TmpDir + "/" + dirA + ".C"
-	err = os.Mkdir(dirC, 0700)
-	if err != nil {
-		t.Fatal(err)
-	}
-	test_helpers.MountOrFatal(t, dirA, dirB, "-reverse", "-extpass", "echo test", opensslOpt)
-	c := dirB + "/gocryptfs.conf"
-	if !test_helpers.VerifyExistence(c) {
-		t.Errorf("%s missing", c)
-	}
-	test_helpers.MountOrFatal(t, dirB, dirC, "-extpass", "echo test", opensslOpt)
-	checkExampleFSrw(t, dirC, false)
-	test_helpers.UnmountPanic(dirC)
-	test_helpers.UnmountPanic(dirB)
-
-	m := "e7fb8f0d-2a81df9e-26611e4b-5540b218-e48aa458-c2a623af-d0c82637-1466b5f2"
-	test_helpers.MountOrFatal(t, dirA, dirB, "-reverse", "-masterkey", m,
-		"-raw64=false", "-hkdf=false", opensslOpt)
-	if !test_helpers.VerifyExistence(c) {
-		t.Errorf("%s missing", c)
-	}
-	test_helpers.MountOrFatal(t, dirB, dirC, "-aessiv", "-masterkey", m,
-		"-raw64=false", "-hkdf=false", opensslOpt)
-	checkExampleFSrw(t, dirC, false)
-	test_helpers.UnmountPanic(dirC)
-	test_helpers.UnmountPanic(dirB)
-}
-
-// gocryptfs v1.3 introduced HKDF
-func TestExampleFSv13(t *testing.T) {
-	cDir := "v1.3"
-	pDir := test_helpers.TmpDir + "/" + cDir
-	err := os.Mkdir(pDir, 0777)
-	if err != nil {
-		t.Fatal(err)
-	}
-	test_helpers.MountOrFatal(t, cDir, pDir, "-extpass", "echo test", opensslOpt)
-	checkExampleFSLongnames(t, pDir)
-	test_helpers.UnmountPanic(pDir)
-
-	pDir = pDir + "_m"
-	test_helpers.MountOrFatal(t, cDir, pDir, "-masterkey",
-		"fd890dab-86bf61cf-ec5ad460-ad3ed01f-9c52d546-2a31783d-a56b088d-3d05232e",
-		opensslOpt)
-	checkExampleFSLongnames(t, pDir)
-	test_helpers.UnmountPanic(pDir)
-}
--- a/tests/plaintextnames/plaintextnames_test.go
+++ /dev/null
@@ -1,84 +0,0 @@
-package plaintextnames
-
-// integration tests that target plaintextnames specifically
-
-import (
-	"io/ioutil"
-	"os"
-	"testing"
-
-	"github.com/rfjakob/gocryptfs/internal/configfile"
-
-	"github.com/rfjakob/gocryptfs/tests/test_helpers"
-)
-
-var cDir string
-var pDir string
-
-// Create and mount "-plaintextnames" fs
-func TestMain(m *testing.M) {
-	cDir = test_helpers.InitFS(nil, "-plaintextnames")
-	pDir = cDir + ".mnt"
-	test_helpers.MountOrExit(cDir, pDir, "-extpass", "echo test")
-	r := m.Run()
-	test_helpers.UnmountPanic(pDir)
-	os.Exit(r)
-}
-
-// Only the PlaintextNames feature flag should be set
-func TestFlags(t *testing.T) {
-	_, cf, err := configfile.LoadConfFile(cDir+"/gocryptfs.conf", "test")
-	if err != nil {
-		t.Fatal(err)
-	}
-	if !cf.IsFeatureFlagSet(configfile.FlagPlaintextNames) {
-		t.Error("PlaintextNames flag should be set but isn't")
-	}
-	if cf.IsFeatureFlagSet(configfile.FlagEMENames) || cf.IsFeatureFlagSet(configfile.FlagDirIV) {
-		t.Error("FlagEMENames and FlagDirIV should be not set")
-	}
-}
-
-// gocryptfs.diriv should NOT be created
-func TestDirIV(t *testing.T) {
-	_, err := os.Stat(cDir + "/gocryptfs.diriv")
-	if err == nil {
-		t.Errorf("gocryptfs.diriv should not be created in the top directory")
-	}
-	err = os.Mkdir(pDir+"/dir1", 0777)
-	if err != nil {
-		t.Error(err)
-	}
-	_, err = os.Stat(pDir + "/dir1/gocryptfs.diriv")
-	if err == nil {
-		t.Errorf("gocryptfs.diriv should not be created in a subdirectory")
-	}
-}
-
-// With "-plaintextnames", the name "/gocryptfs.conf" is reserved, but everything
-// else should work.
-func TestFiltered(t *testing.T) {
-	filteredFile := pDir + "/gocryptfs.conf"
-	err := ioutil.WriteFile(filteredFile, []byte("foo"), 0777)
-	if err == nil {
-		t.Errorf("should have failed but didn't")
-	}
-	err = os.Remove(filteredFile)
-	if err == nil {
-		t.Errorf("should have failed but didn't")
-	}
-	err = ioutil.WriteFile(pDir+"/gocryptfs.diriv", []byte("foo"), 0777)
-	if err != nil {
-		t.Error(err)
-	}
-	subDir, err := ioutil.TempDir(pDir, "")
-	if err != nil {
-		t.Fatal(err)
-	}
-	fd, err := os.Create(subDir + "/gocryptfs.conf")
-	if err != nil {
-		t.Error(err)
-	} else {
-		fd.Close()
-	}
-}
--- a/tests/reverse/longname_perf_test.go
+++ /dev/null
@@ -1,50 +0,0 @@
-package reverse_test
-
-import (
-	"fmt"
-	"os"
-	"testing"
-)
-
-func genName(i int, postfix string) string {
-	return fmt.Sprintf("%04d.%s", i, postfix)
-}
-
-// Create 10000 files with long names
-func generateLongnameFiles(dir string) {
-	for i := 0; i < 100000; i++ {
-		n := genName(i, x240)
-		f, err := os.Create(dir + "/" + n)
-		if err != nil {
-			panic(err)
-		}
-		f.Close()
-	}
-}
-
-func BenchmarkLongnameStat(b *testing.B) {
-	// Setup
-	generateLongnameFiles(dirA)
-	dirFd, err := os.Open(dirB)
-	if err != nil {
-		b.Fatal(err)
-	}
-	encryptedNames, err := dirFd.Readdirnames(-1)
-	if err != nil {
-		b.Fatal(err)
-	}
-	l := len(encryptedNames)
-	dirFd.Close()
-	// Benchmark
-	b.ResetTimer()
-	for i := 0; i < b.N; i++ {
-		_, err := os.Stat(dirB + "/" + encryptedNames[i%l])
-		if err != nil {
-			b.Fatal(err)
-		}
-	}
-	// Cleanup
-	b.StopTimer()
-	os.RemoveAll(dirA)
-	os.Mkdir(dirA, 0700)
-}
--- a/tests/reverse/main_test.go
+++ /dev/null
@@ -1,56 +0,0 @@
-package reverse_test
-
-import (
-	"bytes"
-	"os"
-	"testing"
-
-	"github.com/rfjakob/gocryptfs/tests/test_helpers"
-)
-
-var x240 = string(bytes.Repeat([]byte("x"), 240))
-var plaintextnames bool
-
-// dirA is a normal directory
-var dirA string
-
-// dirB is the reverse mount backed by dirA
-var dirB string
-
-// dirC is a forward mount backed by dirB
-var dirC string
-
-// Create directory "dirA", mount it reverse to "dirB", mount it forward
-// to "dirC".
-func TestMain(m *testing.M) {
-	var r int
-	for _, plaintextnames = range []bool{false, true} {
-		argsA := []string{"-reverse"}
-		if plaintextnames {
-			argsA = append(argsA, "-plaintextnames")
-		}
-		dirA = test_helpers.InitFS(nil, argsA...)
-		dirB = test_helpers.TmpDir + "/b"
-		dirC = test_helpers.TmpDir + "/c"
-		if err := os.Mkdir(dirB, 0700); err != nil {
-			panic(err)
-		}
-		if err := os.Mkdir(dirC, 0700); err != nil {
-			panic(err)
-		}
-		test_helpers.MountOrExit(dirA, dirB, "-reverse", "-extpass", "echo test")
-		test_helpers.MountOrExit(dirB, dirC, "-extpass", "echo test")
-		r = m.Run()
-		test_helpers.UnmountPanic(dirC)
-		test_helpers.UnmountPanic(dirB)
-
-		os.RemoveAll(dirA)
-		os.RemoveAll(dirB)
-		os.RemoveAll(dirC)
-
-		if r != 0 {
-			os.Exit(r)
-		}
-	}
-	os.Exit(r)
-}
--- a/tests/reverse/correctness_test.go
+++ /dev/null
@@ -1,132 +0,0 @@
-package reverse_test
-
-import (
-	"io/ioutil"
-	"os"
-	"syscall"
-	"testing"
-
-	"github.com/rfjakob/gocryptfs/internal/ctlsock"
-	"github.com/rfjakob/gocryptfs/tests/test_helpers"
-)
-
-func TestLongnameStat(t *testing.T) {
-	fd, err := os.Create(dirA + "/" + x240)
-	if err != nil {
-		t.Fatal(err)
-	}
-	path := dirC + "/" + x240
-	if !test_helpers.VerifyExistence(path) {
-		t.Fail()
-	}
-	test_helpers.VerifySize(t, path, 0)
-	_, err = fd.Write(make([]byte, 10))
-	if err != nil {
-		t.Fatal(err)
-	}
-	fd.Close()
-	/*
-		time.Sleep(1000 * time.Millisecond)
-		test_helpers.VerifySize(t, path, 10)
-	*/
-}
-
-func TestSymlinks(t *testing.T) {
-	target := "/"
-	os.Symlink(target, dirA+"/symlink")
-	cSymlink := dirC + "/symlink"
-	_, err := os.Lstat(cSymlink)
-	if err != nil {
-		t.Errorf("Lstat: %v", err)
-	}
-	_, err = os.Stat(cSymlink)
-	if err != nil {
-		t.Errorf("Stat: %v", err)
-	}
-	actualTarget, err := os.Readlink(cSymlink)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if target != actualTarget {
-		t.Errorf("wrong symlink target: want=%q have=%q", target, actualTarget)
-	}
-}
-
-// Symbolic link dentry sizes should be set to the length of the string
-// that contains the target path.
-func TestSymlinkDentrySize(t *testing.T) {
-	if plaintextnames {
-		t.Skip("this only tests encrypted names")
-	}
-	symlink := "a_symlink"
-
-	mnt, err := ioutil.TempDir(test_helpers.TmpDir, "reverse_mnt_")
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	sock := mnt + ".sock"
-	test_helpers.MountOrFatal(t, "ctlsock_reverse_test_fs", mnt, "-reverse", "-extpass", "echo test", "-ctlsock="+sock)
-	defer test_helpers.UnmountPanic(mnt)
-
-	req := ctlsock.RequestStruct{EncryptPath: symlink}
-	symlinkResponse := test_helpers.QueryCtlSock(t, sock, req)
-	if symlinkResponse.ErrNo != 0 {
-		t.Errorf("Encrypt: %q ErrNo=%d ErrText=%s", symlink, symlinkResponse.ErrNo, symlinkResponse.ErrText)
-	}
-
-	fi, err := os.Lstat(mnt + "/" + symlinkResponse.Result)
-	if err != nil {
-		t.Errorf("Lstat: %v", err)
-	}
-
-	target, err := os.Readlink(mnt + "/" + symlinkResponse.Result)
-	if err != nil {
-		t.Errorf("Readlink: %v", err)
-	}
-
-	if fi.Size() != int64(len(target)) {
-		t.Errorf("Lstat reports that symbolic link %q's dentry size is %d, but this does not "+
-			"match the length of the string returned by readlink, which is %d.",
-			symlink, fi.Size(), len(target))
-	}
-}
-
-// .gocryptfs.reverse.conf in the plaintext dir should be visible as
-// gocryptfs.conf
-func TestConfigMapping(t *testing.T) {
-	c := dirB + "/gocryptfs.conf"
-	if !test_helpers.VerifyExistence(c) {
-		t.Errorf("%s missing", c)
-	}
-	data, err := ioutil.ReadFile(c)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if len(data) == 0 {
-		t.Errorf("empty file")
-	}
-}
-
-// Check that the access() syscall works on virtual files
-func TestAccessVirtual(t *testing.T) {
-	if plaintextnames {
-		t.Skip("test makes no sense for plaintextnames")
-	}
-	var R_OK uint32 = 4
-	var W_OK uint32 = 2
-	var X_OK uint32 = 1
-	fn := dirB + "/gocryptfs.diriv"
-	err := syscall.Access(fn, R_OK)
-	if err != nil {
-		t.Errorf("%q should be readable, but got error: %v", fn, err)
-	}
-	err = syscall.Access(fn, W_OK)
-	if err == nil {
-		t.Errorf("should NOT be writeable")
-	}
-	err = syscall.Access(fn, X_OK)
-	if err == nil {
-		t.Errorf("should NOT be executable")
-	}
-}
--- a/tests/reverse/ctlsock_test.go
+++ /dev/null
@@ -1,74 +0,0 @@
-package reverse_test
-
-import (
-	"io/ioutil"
-	"testing"
-
-	"github.com/rfjakob/gocryptfs/internal/ctlsock"
-	"github.com/rfjakob/gocryptfs/tests/test_helpers"
-)
-
-var ctlSockTestCases = [][]string{
-	{"4RQq1dJlfvQPaVU5Xypf0w==", "file"},
-	{"gocryptfs.longname.ZQCAoi5li3xvDZRO8McBV0L_kzJc4IcAOEzuW-2S1Y4=", "longfile." + x240},
-	{"v6puXntoQOk7Mhl8zJ4Idg==", "dir"},
-	{"v6puXntoQOk7Mhl8zJ4Idg==/UVy2gV0RQTUC8AE4wYoMwg==", "dir/file"},
-	{"v6puXntoQOk7Mhl8zJ4Idg==/fvHFLHlxHCQ7EpVMJu0AZg==", "dir/dir"},
-	{"v6puXntoQOk7Mhl8zJ4Idg==/fvHFLHlxHCQ7EpVMJu0AZg==/_4uudIGniACke55JoDsqDA==", "dir/dir/dir"},
-	{"v6puXntoQOk7Mhl8zJ4Idg==/fvHFLHlxHCQ7EpVMJu0AZg==/QvPahkkeVRKTw2kdZFZxwQ==", "dir/dir/file"},
-	{"v6puXntoQOk7Mhl8zJ4Idg==/gocryptfs.longname.y6rxCn6Id8hIZL2t_STpdLZpu-aE2HpprJR25xD60mk=", "dir/longfile." + x240},
-	{"gocryptfs.longname.cvRximo1ATRJVEzw_V9MZieHFlod9y2iv2Sug1kbiTE=", "longdir." + x240},
-	{"gocryptfs.longname.cvRximo1ATRJVEzw_V9MZieHFlod9y2iv2Sug1kbiTE=/-LMdFgFt6UxO-z5iJvuC9w==", "longdir." + x240 + "/dir"},
-	{"gocryptfs.longname.cvRximo1ATRJVEzw_V9MZieHFlod9y2iv2Sug1kbiTE=/rBPJYAzcHWLdPj1T8kgh8A==", "longdir." + x240 + "/file"},
-}
-
-// Test DecryptPath and EncryptPath
-func TestCtlSockPathOps(t *testing.T) {
-	if plaintextnames {
-		t.Skip("this only tests encrypted names")
-	}
-	mnt, err := ioutil.TempDir(test_helpers.TmpDir, "reverse_mnt_")
-	if err != nil {
-		t.Fatal(err)
-	}
-	sock := mnt + ".sock"
-	test_helpers.MountOrFatal(t, "ctlsock_reverse_test_fs", mnt, "-reverse", "-extpass", "echo test", "-ctlsock="+sock)
-	defer test_helpers.UnmountPanic(mnt)
-	var req ctlsock.RequestStruct
-	for i, tc := range ctlSockTestCases {
-		// Decrypt
-		req = ctlsock.RequestStruct{DecryptPath: tc[0]}
-		response := test_helpers.QueryCtlSock(t, sock, req)
-		if response.ErrNo != 0 {
-			t.Errorf("Testcase %d Decrypt: %q ErrNo=%d ErrText=%s", i, tc[0], response.ErrNo, response.ErrText)
-		} else if response.Result != tc[1] {
-			t.Errorf("Testcase %d Decrypt: Want %q got %q", i, tc[1], response.Result)
-		}
-		// Encrypt
-		req = ctlsock.RequestStruct{EncryptPath: tc[1]}
-		response = test_helpers.QueryCtlSock(t, sock, req)
-		if response.ErrNo != 0 {
-			t.Errorf("Testcase %d Encrypt: %q ErrNo=%d ErrText=%s", i, tc[0], response.ErrNo, response.ErrText)
-		} else if response.Result != tc[0] {
-			t.Errorf("Testcase %d Encrypt: Want %q got %q", i, tc[1], response.Result)
-		}
-	}
-}
-
-// We should not panic when somebody feeds requests that make no sense
-func TestCtlSockCrash(t *testing.T) {
-	if plaintextnames {
-		t.Skip("this only tests encrypted names")
-	}
-	mnt, err := ioutil.TempDir(test_helpers.TmpDir, "reverse_mnt_")
-	if err != nil {
-		t.Fatal(err)
-	}
-	sock := mnt + ".sock"
-	test_helpers.MountOrFatal(t, "ctlsock_reverse_test_fs", mnt, "-reverse", "-extpass", "echo test", "-ctlsock="+sock,
-		"-wpanic=0", "-nosyslog=0")
-	defer test_helpers.UnmountPanic(mnt)
-	// Try to crash it
-	req := ctlsock.RequestStruct{DecryptPath: "gocryptfs.longname.XXX_TestCtlSockCrash_XXX.name"}
-	test_helpers.QueryCtlSock(t, sock, req)
-}
--- a/tests/example_filesystems/example_test_helpers.go
+++ /dev/null
@@ -1,78 +0,0 @@
-package example_filesystems
-
-import (
-	"io/ioutil"
-	"os"
-	"path/filepath"
-	"testing"
-
-	"github.com/rfjakob/gocryptfs/tests/test_helpers"
-)
-
-// checkExampleFS - verify that "dir" contains the expected test files
-func checkExampleFS(t *testing.T, dir string, rw bool) {
-	// Read regular file
-	statusFile := filepath.Join(dir, "status.txt")
-	contentBytes, err := ioutil.ReadFile(statusFile)
-	if err != nil {
-		t.Error(err)
-		return
-	}
-	content := string(contentBytes)
-	if content != statusTxtContent {
-		t.Errorf("Unexpected content: %s\n", content)
-	}
-	// Read relative symlink
-	symlink := filepath.Join(dir, "rel")
-	target, err := os.Readlink(symlink)
-	if err != nil {
-		t.Error(err)
-		return
-	}
-	if target != "status.txt" {
-		t.Errorf("Unexpected link target: %s\n", target)
-	}
-	// Read absolute symlink
-	symlink = filepath.Join(dir, "abs")
-	target, err = os.Readlink(symlink)
-	if err != nil {
-		t.Error(err)
-		return
-	}
-	if target != "/a/b/c/d" {
-		t.Errorf("Unexpected link target: %s\n", target)
-	}
-	if rw {
-		// Test directory operations
-		test_helpers.TestRename(t, dir)
-		test_helpers.TestMkdirRmdir(t, dir)
-	}
-}
-
-// checkExampleFSLongnames - verify that "dir" contains the expected test files
-// plus the long file name test file.
-// Also tests simple directory operations.
-func checkExampleFSLongnames(t *testing.T, dir string) {
-	checkExampleFSrw(t, dir, true)
-}
-
-// checkExampleFSrw is like checkExampleFSLongnames but gives the caller the
-// choice if he wants to run tests that write to the FS.
-func checkExampleFSrw(t *testing.T, dir string, rw bool) {
-	// regular tests
-	checkExampleFS(t, dir, rw)
-	// long name test file
-	longname := "longname_255_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" +
-		"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" +
-		"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" +
-		"xxxxxxxxxxxxxxxxxxxxxxxx"
-	contentBytes, err := ioutil.ReadFile(filepath.Join(dir, longname))
-	if err != nil {
-		t.Error(err)
-		return
-	}
-	content := string(contentBytes)
-	if content != statusTxtContent {
-		t.Errorf("longname_255: unexpected content: %s\n", content)
-	}
-}
